//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ChatRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatRef.IChat", CallbackContract=typeof(IChatCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Join", ReplyAction="http://tempuri.org/IChat/JoinResponse")]
        bool Join(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Join", ReplyAction="http://tempuri.org/IChat/JoinResponse")]
        System.Threading.Tasks.Task<bool> JoinAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Send", ReplyAction="http://tempuri.org/IChat/SendResponse")]
        void Send(string from, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Send", ReplyAction="http://tempuri.org/IChat/SendResponse")]
        System.Threading.Tasks.Task SendAsync(string from, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/SendPrivate", ReplyAction="http://tempuri.org/IChat/SendPrivateResponse")]
        void SendPrivate(string from, string to, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/SendPrivate", ReplyAction="http://tempuri.org/IChat/SendPrivateResponse")]
        System.Threading.Tasks.Task SendPrivateAsync(string from, string to, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Leave", ReplyAction="http://tempuri.org/IChat/LeaveResponse")]
        void Leave(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Leave", ReplyAction="http://tempuri.org/IChat/LeaveResponse")]
        System.Threading.Tasks.Task LeaveAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/NewUserCallback")]
        void NewUserCallback(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/NewMessageCallback")]
        void NewMessageCallback(string from, string message, bool isPrivate);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/UserUnjoinedCallBack")]
        void UserUnjoinedCallBack(string from);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<IChat>, IChat {
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Join(string name) {
            return base.Channel.Join(name);
        }
        
        public System.Threading.Tasks.Task<bool> JoinAsync(string name) {
            return base.Channel.JoinAsync(name);
        }
        
        public void Send(string from, string message) {
            base.Channel.Send(from, message);
        }
        
        public System.Threading.Tasks.Task SendAsync(string from, string message) {
            return base.Channel.SendAsync(from, message);
        }
        
        public void SendPrivate(string from, string to, string message) {
            base.Channel.SendPrivate(from, to, message);
        }
        
        public System.Threading.Tasks.Task SendPrivateAsync(string from, string to, string message) {
            return base.Channel.SendPrivateAsync(from, to, message);
        }
        
        public void Leave(string name) {
            base.Channel.Leave(name);
        }
        
        public System.Threading.Tasks.Task LeaveAsync(string name) {
            return base.Channel.LeaveAsync(name);
        }
    }
}
